{"title":{"en":"B. Card Deck","ru":"B. Колода карт"},"contestId":"1492","problemIndex":"B","timeLimit":{"en":"1 second","ru":"1 секунда"},"memLimit":{"en":"512 megabytes","ru":"512 мегабайт"},"inputFormat":{"en":"standard input","ru":"стандартный ввод"},"outputFormat":{"en":"standard output","ru":"стандартный вывод"},"problemHtml":{"en":"<p>You have a deck of $$$n$$$ cards, and you'd like to reorder it to a new one.</p><p>Each card has a value between $$$1$$$ and $$$n$$$ equal to $$$p_i$$$. All $$$p_i$$$ are pairwise distinct. Cards in a deck are numbered from bottom to top, i.&nbsp;e. $$$p_1$$$ stands for the bottom card, $$$p_n$$$ is the top card. </p><p>In each step you pick some integer $$$k &gt; 0$$$, take the top $$$k$$$ cards from the original deck and place them, in the order they are now, on top of the new deck. You perform this operation until the original deck is empty. (Refer to the notes section for the better understanding.)</p><p>Let's define an <span class=\"tex-font-style-it\">order of a deck</span> as $$$\\sum\\limits_{i = 1}^{n}{n^{n - i} \\cdot p_i}$$$.</p><p>Given the original deck, output the deck with maximum possible order you can make using the operation above.</p>","ru":"<p>У вас есть колода из $$$n$$$ карт, и вы хотите переупорядочить ее по-новому.</p><p>У каждой карты есть целое значение от $$$1$$$ по $$$n$$$ равное $$$p_i$$$. Все $$$p_i$$$ попарно различны. Карты в колоде пронумерованы снизу вверх, таким образом $$$p_1$$$ лежит внизу колоды, а $$$p_n$$$&nbsp;— на самом верху.</p><p>Вы перекладываете колоду шаг за шагом. На каждом шаге вы выбираете некоторое целое $$$k &gt; 0$$$, берете $$$k$$$ верхних карт из вашей колоды и кладете их, не меняя порядка, на верх новой колоды. Вы применяете данную операцию, пока ваша первоначальная колода не опустеет. (Для лучшего понимания изучите примечания к тестовым примерам.)</p><p>Назовем <span class=\"tex-font-style-it\">упорядоченностью колоды</span> сумму $$$\\sum\\limits_{i = 1}^{n}{n^{n - i} \\cdot p_i}$$$.</p><p>Для заданной колоды, определите колоду с максимально возможной упорядоченностью, которую вы можете получить, используя алгоритм, описанный выше.</p>"},"inSpecsHtml":{"en":"<div class=\"section-title\">Input</div><p>The first line contains a single integer $$$t$$$ ($$$1 \\le t \\le 1000$$$)&nbsp;— the number of test cases.</p><p>The first line of each test case contains the single integer $$$n$$$ ($$$1 \\le n \\le 10^5$$$)&nbsp;— the size of deck you have.</p><p>The second line contains $$$n$$$ integers $$$p_1, p_2,\\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$; $$$p_i \\neq p_j$$$ if $$$i \\neq j$$$)&nbsp;— values of card in the deck from bottom to top.</p><p>It's guaranteed that the sum of $$$n$$$ over all test cases doesn't exceed $$$10^5$$$.</p>","ru":"<div class=\"section-title\">Входные данные</div><p>В первой строке задано одно целое число $$$t$$$ ($$$1 \\le t \\le 1000$$$)&nbsp;— количество наборов входных данных.</p><p>В первой строке каждого набора задано одно целое число $$$n$$$ ($$$1 \\le n \\le 10^5$$$)&nbsp;— количество карт в колоде.</p><p>Во второй строке заданы $$$n$$$ целых чисел $$$p_1, p_2,\\dots, p_n$$$ ($$$1 \\le p_i \\le n$$$; $$$p_i \\neq p_j$$$ если $$$i \\neq j$$$)&nbsp;— значения карт в колоде в порядке снизу вверх.</p><p>Гарантируется, что сумма $$$n$$$ по всем наборам входных данных не превосходит $$$10^5$$$.</p>"},"outSpecsHtml":{"en":"<div class=\"section-title\">Output</div><p>For each test case print the deck with maximum possible order. Print values of cards in the deck from bottom to top.</p><p>If there are multiple answers, print any of them.</p>","ru":"<div class=\"section-title\">Выходные данные</div><p>Для каждого набора входных данных, выведите колоду с максимально возможной упорядоченностью. Выводите значения карт начиная с нижних в колоде.</p><p>Если существует несколько ответов, выведите любой из них.</p>"},"noteHtml":{"en":"<div class=\"section-title\">Note</div><p>In the first test case, one of the optimal strategies is the next one: </p><ol> <li> take $$$1$$$ card from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes $$$[1, 2, 3]$$$, $$$p'$$$ becomes $$$[4]$$$; </li><li> take $$$1$$$ card from the top of $$$p$$$: $$$p$$$ becomes $$$[1, 2]$$$, $$$p'$$$ becomes $$$[4, 3]$$$; </li><li> take $$$1$$$ card from the top of $$$p$$$: $$$p$$$ becomes $$$[1]$$$, $$$p'$$$ becomes $$$[4, 3, 2]$$$; </li><li> take $$$1$$$ card from the top of $$$p$$$: $$$p$$$ becomes empty, $$$p'$$$ becomes $$$[4, 3, 2, 1]$$$. </li></ol> In result, $$$p'$$$ has order equal to $$$4^3 \\cdot 4 + 4^2 \\cdot 3 + 4^1 \\cdot 2 + 4^0 \\cdot 1$$$ $$$=$$$ $$$256 + 48 + 8 + 1 = 313$$$.<p>In the second test case, one of the optimal strategies is: </p><ol> <li> take $$$4$$$ cards from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes $$$[1]$$$, $$$p'$$$ becomes $$$[5, 2, 4, 3]$$$; </li><li> take $$$1$$$ card from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes empty, $$$p'$$$ becomes $$$[5, 2, 4, 3, 1]$$$; </li></ol> In result, $$$p'$$$ has order equal to $$$5^4 \\cdot 5 + 5^3 \\cdot 2 + 5^2 \\cdot 4 + 5^1 \\cdot 3 + 5^0 \\cdot 1$$$ $$$=$$$ $$$3125 + 250 + 100 + 15 + 1 = 3491$$$.<p>In the third test case, one of the optimal strategies is: </p><ol> <li> take $$$2$$$ cards from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes $$$[4, 2, 5, 3]$$$, $$$p'$$$ becomes $$$[6, 1]$$$; </li><li> take $$$2$$$ cards from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes $$$[4, 2]$$$, $$$p'$$$ becomes $$$[6, 1, 5, 3]$$$; </li><li> take $$$2$$$ cards from the top of $$$p$$$ and move it to $$$p'$$$: $$$p$$$ becomes empty, $$$p'$$$ becomes $$$[6, 1, 5, 3, 4, 2]$$$. </li></ol> In result, $$$p'$$$ has order equal to $$$6^5 \\cdot 6 + 6^4 \\cdot 1 + 6^3 \\cdot 5 + 6^2 \\cdot 3 + 6^1 \\cdot 4 + 6^0 \\cdot 2$$$ $$$=$$$ $$$46656 + 1296 + 1080 + 108 + 24 + 2 = 49166$$$.","ru":"<div class=\"section-title\">Примечание</div><p>В первом наборе входных данных одна из оптимальных стратегий&nbsp;— следующая: </p><ol> <li> возьмем $$$1$$$ карту сверху $$$p$$$ и перенесем ее в $$$p'$$$: $$$p$$$ станет $$$[1, 2, 3]$$$, $$$p'$$$ станет $$$[4]$$$; </li><li> возьмем $$$1$$$ карту сверху $$$p$$$: $$$p$$$ станет $$$[1, 2]$$$, $$$p'$$$ станет $$$[4, 3]$$$; </li><li> возьмем $$$1$$$ карту сверху $$$p$$$: $$$p$$$ станет $$$[1]$$$, $$$p'$$$ станет $$$[4, 3, 2]$$$; </li><li> возьмем $$$1$$$ карту сверху $$$p$$$: $$$p$$$ опустеет, а $$$p'$$$ станет $$$[4, 3, 2, 1]$$$. </li></ol> В результате упорядоченность $$$p'$$$ равна $$$4^3 \\cdot 4 + 4^2 \\cdot 3 + 4^1 \\cdot 2 + 4^0 \\cdot 1$$$ $$$=$$$ $$$256 + 48 + 8 + 1 = 313$$$.<p>Во втором наборе одна из оптимальных стратегий такая: </p><ol> <li> возьмем $$$4$$$ карты сверху $$$p$$$ и переместим их в $$$p'$$$: $$$p$$$ станет $$$[1]$$$, $$$p'$$$ станет $$$[5, 2, 4, 3]$$$; </li><li> возьмем $$$1$$$ карту сверху $$$p$$$ и перенесем ее в $$$p'$$$: $$$p$$$ опустеет, а $$$p'$$$ станет $$$[5, 2, 4, 3, 1]$$$; </li></ol> В результате упорядоченность $$$p'$$$ равна $$$5^4 \\cdot 5 + 5^3 \\cdot 2 + 5^2 \\cdot 4 + 5^1 \\cdot 3 + 5^0 \\cdot 1$$$ $$$=$$$ $$$3125 + 250 + 100 + 15 + 1 = 3491$$$.<p>Во третьем наборе одна из оптимальных стратегий такая: </p><ol> <li> возьмем $$$2$$$ карты сверху $$$p$$$ и переместим их в $$$p'$$$: $$$p$$$ станет $$$[4, 2, 5, 3]$$$, $$$p'$$$ станет $$$[6, 1]$$$; </li><li> возьмем $$$2$$$ карты сверху $$$p$$$ и переместим их в $$$p'$$$: $$$p$$$ станет $$$[4, 2]$$$, $$$p'$$$ станет $$$[6, 1, 5, 3]$$$; </li><li> возьмем $$$2$$$ карты сверху $$$p$$$ и переместим их в $$$p'$$$: $$$p$$$ опустеет, а $$$p'$$$ станет $$$[6, 1, 5, 3, 4, 2]$$$. </li></ol> В результате упорядоченность $$$p'$$$ равна $$$6^5 \\cdot 6 + 6^4 \\cdot 1 + 6^3 \\cdot 5 + 6^2 \\cdot 3 + 6^1 \\cdot 4 + 6^0 \\cdot 2$$$ $$$=$$$ $$$46656 + 1296 + 1080 + 108 + 24 + 2 = 49166$$$."},"sampleTestcases":[{"id":1654397788845,"input":"4\n4\n1 2 3 4\n5\n1 5 2 4 3\n6\n4 2 5 3 6 1\n1\n1","output":"4 3 2 1\n5 2 4 3 1\n6 1 5 3 4 2\n1\n","result":{"id":1654397788845,"stdout":"4 3 2 1 \n5 2 4 3 1 \n6 1 5 3 4 2 \n1 \n","stderr":"","exitcode":0,"signal":null,"time":1,"timeout":false}}],"submitUrl":"https://codeforces.com/contest/1492/submit","language":"c++","langId":"61"}